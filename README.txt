TASKit ~TA支援システム~

開発背景
-------

大学の講義は一般に生徒数が多く先生一人で生徒全員を担当するのは困難です。
そこでTA(Teaching Assistant)というものを採用します。
アシスタントとは言っても大抵は大学院生がそれを担います。

TAは以下のような先生の補助的な業務を主に行います。
* 出席のチェック
* 課題の提出チェック
* 教室を巡回し、分からない生徒に教える

それらの業務には従来は紙媒体での管理を行なっており、
複数のTAや先生間の同期が取れないこと、それにより
生徒の成績確認が困難であること、チェックミスが起こりやすい
などの問題がありました。

TASKitはそれらを電子化し統合的に管理することにより
* 人為的ミスを無くすこと
* 業務全体を効率化すること
を目指し開発しています。


概要
----

TASKitは、PCから近年急速に普及しているスマート端末
出来る限り多くのプラットフォームで利用できるよう、
Webアプリケーションとして開発しています。
JavaScriptの動作するWebブラウザであれば実行可能なシステムです。

サーバーサイドの実行環境は、
* データサーバーとしてMySQL
* アプリケーションサーバーとしてTomcat
にて動作を確認していますが、Hibernate、つまりJDBCをデータベースコネクタとして
利用しているためJDBCがサポートしているデータベース、また標準のJavaEEサーバー
の実装であればそのたのアプリケーションサーバーでも動作します。

機能を以下に列挙します。
* 出席・課題の提出チェック
	TAが利用する機能で、紙媒体で行うチェックと違いデータを
	一元的に管理することができます。
* 生徒用のチェック状況確認のためのビュー
	生徒用のページを用意しており、TAにより評価された自分の課題、出席状況を
	いつでも自分で確認することが出来ます。
* アカウント管理
	先生、TA、生徒により利用可能なサービスを分けています。
	JavaScriptは難読化していますが万が一解読されたとしても
	サーバーサイドで利用可能な機能を制限しているため、
	改ざんは、アカウントが盗まれたりしない限りは困難なものとなっています。
* データの同期
	各サービスはサーバープッシュによりデータの変更を監視しており、
	例えばTAにより課題のチェックが行われると、その課題を提出した
	生徒のページは即座にその変更を検出し、自動更新されます。
* TAコール
	生徒の中には、「TAを呼ぶために手を挙げておくのがつらい」
	「手を挙げるのが恥ずかしい」という人もいますし、
	手を挙げた生徒の順番を正確に把握しておくことは困難です。
	そのため生徒用ページにTAを呼び出すためのボタンを設置しました。
	そのボタンを押すだけで、TAのキューに追加されます。
	この機能も同期されているため、生徒がボタンを押すと即座に
	TA、先生もそれを知ることが出来ます。その時、HTML5のaudioタグ
	を利用し、音により通知することも出来ます。
* ルームマップ
	TAコールにより、TAはどの生徒の呼び出しているのか知ることは出来ますが、
	それは「11236001」のような学籍番号あり、これでは場所が分かりません。
	そこで学籍番号を元に、その学生をハイライトしたマップ画像を生成し表示する
	機能を提供しています。
	このマップは、サーバー側ではCSVから生成しているため、
	Open(Libre)Officeや、Microsoft Officeなどで編集することができます。
* 成績統計
	生徒の成績データは常に統計をとっており、TAが生徒の課題を評価すると
	直ちに生徒のページが更新され、クラス内での順位、偏差値などを知ることが出来ます。
	これらのデータはTAからも確認可能であり、成績順にソートすることで、
	成績の良くない危ない生徒を見つけ、指導することも可能です。
* 講義データ・課題データ編集
	先生アカウントのみ、講義データや課題データの編集を行うことが出来ます。
	「講義中に課題を追加、変更する」といったことも可能です。
* 国際化
	クライアントサイドのすべてのラベル・メッセージは国際化しています。
	現在は英語と日本語のみですが、翻訳者さえいればすぐにロケールを追加する
	ことが可能です。
	サーバーサイドについては現在は英語のみとなっているため、
	例えばクライアントサイドでも問題が起こった場合はサーバーサイドからの
	英語メッセージがそのまま表示されることはあります。


パッケージ構成
-------------
org.mklab.taskit.client
	クライアントサイドでのみ利用されるコードを含むパッケージです。
org.mklab.taskit.server
	サーバーサイドでのみ利用されるコードを含むパッケージです。
org.mklab.taskit.shared
	クライアントサイド、サーバーサイドどちらでも利用可能であるコードを含むパッケージです。
	ドメインオブジェクト、またはそのプロキシ、RPC用のインターフェースなどが含まれます。

clientとsharedは、GWTでJavaScriptに変換されブラウザで実行されるため、
GWTがサポートしている
JRE Emulation[http://code.google.com/intl/sv-SE/webtoolkit/doc/latest/RefJreEmulation.html]
しか利用できないという制限があります。


利用技術
--------
* 共通
	* GWT RequestFactoryフレームワーク
		データストレージに依存しないRPCを提供する。
		JPA、JDOなどの永続化では、その実現のためにエンティティのクラスファイルを編集し
		Serializableではない余計な依存が埋め込まれる。
		サーバー、クライアント間でデータをやり取りする際にはDTOをそれぞれに
		定義しなければならなかった。(Entity, DTO, DAO, Serviceの4つが必要)
		RequestFactoryでは、裏側でデータを送れる形に変換して送るためDTOを
		作成する必要がない。またDAOクラスの内容をエンティティに記述することもでき
		実質一つの具象クラスで実現できる。
	* GWTEventService
		サーバープッシュを行うライブラリ。
		クライアント-サーバー間でイベント駆動が実現できる。
* クライアント
	* GWTのMVPフレームワーク
* サーバー
	* Hibernate (JPA implementation)
